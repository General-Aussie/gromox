.TH gromox\-kdb2mt 8gx "" "Gromox" "Gromox admin reference"
.SH Name
\fBgromox\-kdb2mt\fP \(em Utility for analysis of Kopano databases
.SH Synopsis
\fBgromox\-kdb2mt\fP [\fB\-pstv\fP] [\fB\-\-src\-host\fP \fIsqlhost\fP]
[\fB\-\-src\-user\fP \fIsqluser\fP] [\fB\-\-src-port\fP \fIsqlport\fP]
[\fB\-\-src\-db\fP \fIdbname\fP] \fB\-\-src\-at\fP \fIdir\fP
{\fB\-\-src\-guid\fP \fImboxguid\fP|\fB\-\-src\-mbox\fP \fIusername\fP} [...]
.SH Description
gromox\-kdb2mt reads one store from a Zarafa/Kopano SQL database and, for
attachments, the associated filesystem. The data is then re-exported in a
Gromox-specific mailbox transfer format to stdout for consumption by pipe by
the gromox-mt2exm(8gx) program. Optionally, kdb2mt can print a summary of the
hierarchy during extraction.
.PP
The SQL server that carries the Zarafa/Kopano database for the home server
of the user must be active. Databases with a schema version \fBn61\fP or
newer (ZCP versions 7.0.3 and onwards, and all KC versions) are supported.
.PP
The kopano\-server(8) process need not be running. LDAP need not be running.
.PP
The directory of Kopano attachments of the home server should be made available
in the mount namespace whereever gromox\-kdb2mt runs.
.PP
No permissions are extracted.
.SH Options
.TP
\fB\-p\fP
Show properties in detail (enhances \fB\-t\fP).
.TP
\fB\-s\fP
Splice objects from the source database into existing (Gromox-side) folders.
Specifically, the source mailbox root is mapped to the Gromox store root, and
special folders (Sent Items, Deleted Items, etc.) are mapped to special folders
in the target store.
.TP
\fB\-t\fP
Show a diagnostic tree view of the source data as it is being read.
.TP
\fB\-v\fP
Print message count progress while processing larger folders. This option has
no effect if (the even more verbose) \fB\-t\fP option was used.
.TP
\fB\-\-src\-host\fP \fIhostname\fP
Hostname for the source SQL connection.
.br
Default: (MySQL default; \fIlocalhost\fP)
.TP
\fB\-\-src\-port\fP \fIport\fP
Port for the source SQL connection.
.br
Default: (MySQL default; automatic)
.TP
\fB\-\-src\-user\fP \fIusername\fP
Username for the source SQL connection.
.br
Default: \fIroot\fP
.TP
\fB\-\-src\-db\fP \fIdbname\fP
Database name.
.br
Default: \fIkopano\fP
.TP
\fB\-\-src\-at\fP \fIdirectory\fP
Required specification to the /var/lib/kopano/attachments directory mounted
somewhere locally. (To skip over file-based attachments, use the empty
value, i.e. \fB\-\-src\-at ""\fP.)
.TP
\fB\-\-src\-guid\fP \fIguid\fP
Selects the mailbox with the particular GUID for extraction.
(This may be used to read orphaned stores.)
.TP
\fB\-\-src\-mbox\fP \fIusername\fP
Scan the source database for a mailbox which appears to have last been used by
\fIusername\fP, and use it for extraction. There are a number of caveats
related to this lookup; see the section "Store lookup by name" further below.
.TP
\fB\-\-l1\fP \fIx\fP, \fB\-\-l2\fP \fIy\fP
If you are using "attachment_storage=files_v1-\fIx\fP-\fIy\fP" in
kopano-server.cfg, call kdb2mt with the L1 and L2 options.
.TP
\fB\-\-only\-obj\fP \fIhid\fP
Extract just the object with the given hierarchy id. This option may be
specified multiple times. In the output stream, the objects will have an
unspecified location given as their parent folder. (mt2exm will use the
drafts folder because it is expectedly less crowded than one's inbox.)
.SH Environment variables
.TP
\fBSRCPASS\fP
Password for the source SQL connection.
.SH Examples
Scenario 1. Gromox and Kopano are located on two different hosts; gromox\-kdb2mt
is executed from the Gromox system and pulls from a remote SQL and remote
filesystem presented locally.
.PP
sshfs root@kdb.lan:/var/lib/kopano/attachments /tmp/at
.PP
SRCPASS=sqlrootpass gromox\-kdb2mt \-\-src\-host kdb.lan \-\-src\-attach /tmp/at
\-\-src\-mbox jdoe | gromox\-mt2exm target@domain.de
.PP
Scenario 2. Gromox can be installed on the Kopano host, pulling from a
local/remote SQL and local filesystem, while sending its export stream to
another machine.
.PP
gromox\-kdb2mt \-\-src\-attach /var/lib/kopano/attachments \-\-src\-mbox jdoe |
ssh -Tenone root@gromox.lan "gromox\-mt2exm \-u target@domain.de"
.PP
It is also possible to copy the attachment directory beforehand, or to store
the MT data stream, though additional disk space for these intermediate objects
and representation would be required.
.SH Store lookup using Kopano tools
If kdb2mt's built-in heuristic \-\-src\-mbox resolution mechanism is not
adequate enough, you can use utilities from the Kopano installation, provided
that is still active.
.IP \(bu 4
`kopano\-storeadm \-M` is the gold standard. This dumps the entire store list,
in JSON representation. The GUIDs can then be used together with \-\-src\-guid.
.IP \(bu 4
The global "SYSTEM" user object has a private store titled "Inbox \- SYSTEM".
Not that you will ever need it; this store is practically empty all the time.
Alternatively, the GUID can also be shown with `kopano\-admin \-\-details
SYSTEM`.
.IP \(bu 4
The global public store, if it exists, is owned by the "Everyone" \fIgroup
object\fP. In kopano\-storeadm output, it can be found by looking for the
display name "Public Folders". There is no way to see the GUID via
kopano\-admin.
.IP \(bu 4
Just for completeness: There is no per-company SYSTEM user (and hence no
store). If anything, companies re-use the global SYSTEM user as a member.
.IP \(bu 4
The per-company public folder, if it exists, is owned by the respective
\fIcompany object\fP. In kopano\-storeadm output, it can be found by looking
for the display name "Public Folders - MyCompany". Alternatively, the GUID can
also be shown with `kopano\-admin \-\-type company \-\-details MyCompany`.
.SH Store lookup by name
Generally, Kopano SQL databases do not store usernames. Store ownership is
recorded with a Kopano-level numeric ID, which itself is mapped to a
site-specific attribute of an authentication service, e.g. the uidNumber field
of an LDAP. Only the auth service would know the username, and kdb2mt does not
rely on its existence.
.PP
Every store has a metadata field for the \fBmost recent owner\fP (MRO). This
field was intended for orphaned stores and has informational value only.
Because it is possible to orphan and recreate stores, the MRO field value is
\fBnot unique\fP across the set of all stores.
.PP
Furthermore, the MRO field is missing the domain/company part of the username.
Company public stores (in hosted setups) use the company name as MRO. This all
contributes to \-\-src\-mbox possibly matching multiple stores.
.PP
When more than one store matches in any way, kdb2mt will print the result set
with GUIDs and exit, at which point you need to use \-\-src\-guid instead.
.SH See also
\fBgromox\fP(7), \fBgromox\-mt2exm\fP(8gx)
